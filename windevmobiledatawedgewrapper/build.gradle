plugins {
    id 'com.android.library'
    id 'maven-publish'
}

ext {
    PUBLISH_GROUP_ID = 'com.zebra.windevmobiledatawedgewrapper'
    PUBLISH_ARTIFACT_ID = 'windevmobiledatawedgewrapper'
    PUBLISH_VERSION = '6.22'
    jarName = "${PUBLISH_ARTIFACT_ID}-${PUBLISH_VERSION}.jar"
}

android {
    namespace 'com.zebra.windevmobiledatawedgewrapper'

    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.6.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    api 'com.github.ltrudu:DataWedgeIntentWrapper:14.0'
}

tasks.register('clearJarRelease', Delete) {
    delete "${buildDir}/outputs/jar/release/${jarName}"
}


tasks.register('clearJarDebug', Delete) {
    delete "${buildDir}/outputs/jar/debug/${jarName}"
}

tasks.register('makeJarRelease', Copy) {
    from("${buildDir}/intermediates/intermediate-jars/release/")
    into("${buildDir}/outputs/jar/release")
    include('classes.jar')
    rename('classes.jar', jarName)
}

tasks.register('makeJarDebug', Copy) {
    from("${buildDir}/intermediates/intermediate-jars/debug/")
    into("${buildDir}/outputs/jar/debug")
    include('classes.jar')
    rename('classes.jar', jarName)
}

tasks.register('makeAllJar', Copy) {
    dependsOn tasks.named('makeJarRelease'), tasks.named('makeJarDebug')
}

tasks.named('makeJarRelease').configure {
    dependsOn tasks.named('clearJarRelease'), tasks.named('build')
}

tasks.named('makeJarDebug').configure {
    dependsOn tasks.named('clearJarDebug'), tasks.named('build')
}

tasks.register('zipRelease', Zip) {
    from "${buildDir}/release/${PUBLISH_VERSION}"
    destinationDirectory.set(buildDir)
    archiveFileName.set("release-${PUBLISH_VERSION}.zip")
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.PUBLISH_GROUP_ID
            artifactId = project.PUBLISH_ARTIFACT_ID
            version = project.PUBLISH_VERSION
        }
    }

    repositories {
        maven {
            url = uri("${buildDir}/release/${PUBLISH_VERSION}")
        }
    }
}

tasks.register('androidJavadocs', Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    classpath += files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
}

tasks.register('androidJavadocsJar', Jar) {
    from tasks.named('androidJavadocs').get().destinationDir
    archiveClassifier.set('javadoc')
}

tasks.register('androidSourcesJar', Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
}

artifacts {
    archives tasks.named('androidSourcesJar')
    archives tasks.named('androidJavadocsJar')
}
